#!/bin/bash

# The concept of this program is familar with `tush-check` from Tush
# <https://github.com/darius/tush>
# The differense is the format of processing files.

DO_PRINT=''

if ! options=$(getopt -u -o hp -l help,print -- "$@") ; then
    exit 1
fi

set -- $options
while [ $# -gt 0 ]; do
    case "$1" in
        (-p|--print)
            DO_PRINT=1
            ;;

        (-h|--help)
            read -r -d '' USAGE <<USAGE
Usage:

    $(basename "$0") [options] [--] file cmd [args]
    $(basename "$0") --help

Description:

    Runs `cmd [args]` passing to its stdin content of IN section from the file.
    Output differense of actual results with expected from source file.
    Exit successfully when actual result is same as expected.
    Exit with failure in case of differense.

Options

    -p, --print
        Print filename before processing.

USAGE
            echo "$USAGE"
            exit
            ;;

        (--) shift; break;;
        (-*) echo "$(basename "$0"): unrecognized option $1" >&2; exit 1;;
        (*)  break;;
    esac
    shift
done

# rest args
case $# in
    (0|1) echo "Usage: $(basename "$0") file cmd [args]" >&2; exit 2;;
esac

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )"; pwd )"
RUN_FILE_BASE=run-file
RUN_FILE="$THIS_DIR/$RUN_FILE_BASE"

FILE="$1"
IN=''
OUT="$(mktemp)"
[[ -n "$DO_PRINT" ]] && echo "$FILE"
if [ '-' = "$FILE" ]; then
    FILE="$(mktemp)"
    IN="$FILE"
    cat > "$FILE"
    shift
    set -- "$FILE" "$@"
fi

function cleanup {
    rm "$OUT"
    [[ -n "$IN" ]] && rm "$IN"
}

trap '
    EXIT_CODE=$?
    cleanup
    exit $EXIT_CODE
' 1 2 15

if ! "$RUN_FILE" "$@" > "$OUT"; then
    echo "$(basename "$0"): $RUN_FILE_BASE failed" >&2
    exit 2
fi
diff --label expected --label actual -u "$FILE" "$OUT"
EXIT_CODE=$?
cleanup
exit $EXIT_CODE
