#!/bin/bash

# The concept of this program is familar with `tush-bless` from Tush merged with
# its `overwrite` program.
# <https://github.com/darius/tush>
# The differense is the format of processing files.

DO_PRINT=''

if ! options=$(getopt -u -o hp -l help,print -- "$@") ; then
    exit 1
fi

set -- $options
while [ $# -gt 0 ]; do
    case "$1" in
        (-p|--print)
            DO_PRINT=1
            ;;

        (-h|--help)
            read -r -d '' USAGE <<USAGE
Usage:

    $(basename "$0") [options] [--] file cmd [args]
    $(basename "$0") --help

Description:

    Updates the file with the new results `cmd [args]`. Section IN from the file
    will be passed to `cmd` stdin.
    This program is needed to update files with respect to actual results.

Options

    -p, --print
        Print filename before processing.

USAGE
            echo "$USAGE"
            exit
            ;;

        (--) shift; break;;
        (-*) echo "$(basename "$0"): unrecognized option $1" >&2; exit 1;;
        (*)  break;;
    esac
    shift
done

# rest args
case $# in
    (0|1) echo "Usage: $(basename "$0") file cmd [args]" >&2; exit 2;;
esac

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )"; pwd )"
RUN_FILE_BASE=run-file
RUN_FILE="$THIS_DIR/$RUN_FILE_BASE"

FILE="$1"
NEW="$(mktemp)"

[[ -n "$DO_PRINT" ]] && echo "$FILE"

function cleanup {
    rm -f "$NEW"
}

trap '
    EXIT_CODE=$?
    cleanup
    exit $EXIT_CODE
' 1 2 15

if "$RUN_FILE" "$@" > "$NEW" ; then
    trap '' 1 2 15
    cp "$NEW" "$FILE"
else
    echo "$(basename "$0"): $RUN_FILE_BASE failed - '$FILE' was not changed" >&2
    exit 1
fi

cleanup
